name: Build PHP for Android

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      PHP_VERSION: 8.4.6
      ARCH: arm64-v8a
      API_LEVEL: 21
      TARGET_HOST: aarch64-linux-android

    steps:
      # Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v2

      # Set up Android NDK
      - name: Set up Android NDK
        run: |
          wget https://dl.google.com/android/repository/android-ndk-r28b-linux.zip
          unzip android-ndk-r28b-linux.zip
          echo "ANDROID_NDK_HOME=$GITHUB_WORKSPACE/android-ndk-r28b" >> $GITHUB_ENV

      # Install build tools and re2c
      - name: Install build tools and re2c
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake unzip wget
          sudo apt-get install -y re2c pkg-config
          re2c --version

      # Build OpenSSL for Android
      - name: Build OpenSSL for Android
        run: |
          # Install required tools
          sudo apt-get install -y perl gcc-multilib
          
          # Download OpenSSL (using official source)
          wget https://www.openssl.org/source/openssl-3.5.0.tar.gz
          tar xzf openssl-3.5.0.tar.gz
          cd openssl-3.5.0

          # Set up Android toolchain
          export TOOLCHAIN=$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64
          export PATH=$TOOLCHAIN/bin:$PATH
          
          # Configure environment
          export ANDROID_NDK=$ANDROID_NDK_HOME
          export CC=clang
          export CXX=clang++
          export AR=llvm-ar
          export RANLIB=llvm-ranlib
          export LD=ld
          export AS=llvm-as
          export STRIP=llvm-strip
          
          # Configure for Android
          ./Configure android-arm64 \
            -D__ANDROID_API__=$API_LEVEL \
            --prefix=$GITHUB_WORKSPACE/deps/openssl \
            -DANDROID \
            -U__ANDROID_API__ \
            -D__ANDROID_API__=$API_LEVEL \
            -fPIC \
            no-shared \
            no-ssl3 \
            no-comp \
            no-hw \
            no-engine

          # Build and install
          make -j$(nproc)
          make install_sw

      # Build libcurl for Android
      - name: Build libcurl for Android
        run: |
          wget https://curl.se/download/curl-8.6.0.tar.gz
          tar xzf curl-8.6.0.tar.gz
          cd curl-8.6.0
          
          export TOOLCHAIN=$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64
          export SYSROOT=$TOOLCHAIN/sysroot
          export CC="$TOOLCHAIN/bin/${TARGET_HOST}${API_LEVEL}-clang"
          export CXX="$TOOLCHAIN/bin/${TARGET_HOST}${API_LEVEL}-clang++"
          export AR="$TOOLCHAIN/bin/llvm-ar"
          export RANLIB="$TOOLCHAIN/bin/llvm-ranlib"
          export PATH=$GITHUB_WORKSPACE/deps/openssl/bin:$PATH
          
          ./configure \
            --host=$TARGET_HOST \
            --prefix=$GITHUB_WORKSPACE/deps/curl \
            --with-openssl=$GITHUB_WORKSPACE/deps/openssl \
            --disable-shared \
            --enable-static \
            --with-sysroot="$SYSROOT"
          
          make -j$(nproc)
          make install

      # Build libzip for Android
      - name: Build libzip for Android
        run: |
          git clone https://github.com/nih-at/libzip.git
          mkdir -p libzip/build && cd libzip/build
          cmake .. \
            -DCMAKE_TOOLCHAIN_FILE=$GITHUB_WORKSPACE/android-ndk-r28b/build/cmake/android.toolchain.cmake \
            -DANDROID_ABI=${ARCH} \
            -DANDROID_PLATFORM=android-${API_LEVEL} \
            -DCMAKE_INSTALL_PREFIX=$GITHUB_WORKSPACE/deps/libzip \
            -DBUILD_SHARED_LIBS=OFF
          make -j$(nproc)
          make install

      # Clone PHP source
      - name: Clone PHP source
        run: |
          git clone https://github.com/php/php-src.git
          cd php-src
          git checkout PHP-${PHP_VERSION}

      # Build PHP for Android
      - name: Build PHP
        run: |
          cd php-src
          export TOOLCHAIN=$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64
          export SYSROOT=$TOOLCHAIN/sysroot

          export CC="$TOOLCHAIN/bin/${TARGET_HOST}${API_LEVEL}-clang"
          export CXX="$TOOLCHAIN/bin/${TARGET_HOST}${API_LEVEL}-clang++"
          export AR="$TOOLCHAIN/bin/llvm-ar"
          export RANLIB="$TOOLCHAIN/bin/llvm-ranlib"
          export LD="$TOOLCHAIN/bin/ld"
          export STRIP="$TOOLCHAIN/bin/llvm-strip"
          export PATH=$GITHUB_WORKSPACE/deps/openssl/bin:$PATH

          export CURL_CFLAGS="-I$GITHUB_WORKSPACE/deps/curl/include"
          export CURL_LIBS="-L$GITHUB_WORKSPACE/deps/curl/lib -lcurl"

          export PKG_CONFIG_PATH=$GITHUB_WORKSPACE/deps/libzip/lib/pkgconfig:$GITHUB_WORKSPACE/deps/curl/lib/pkgconfig:$GITHUB_WORKSPACE/deps/openssl/lib/pkgconfig

          ./buildconf --force

          ./configure \
            --host=$TARGET_HOST \
            --prefix=$GITHUB_WORKSPACE/install/${ARCH} \
            --disable-all \
            --enable-cli \
            --enable-mbstring \
            --enable-json \
            --enable-filter \
            --enable-ctype \
            --enable-tokenizer \
            --enable-pdo \
            --with-pdo-sqlite \
            --with-sqlite3 \
            --with-zlib \
            --with-openssl=$GITHUB_WORKSPACE/deps/openssl \
            --with-curl=$GITHUB_WORKSPACE/deps/curl \
            --with-libxml \
            --enable-xml \
            --with-zip=$GITHUB_WORKSPACE/deps/libzip \
            CC="$CC" CXX="$CXX" AR="$AR" RANLIB="$RANLIB" LD="$LD" STRIP="$STRIP" \
            --with-sysroot="$SYSROOT"

          make -j$(nproc)
          make install

      # Archive PHP binary
      - name: Archive PHP binary
        run: |
          mkdir -p ${{ github.workspace }}/install/${ARCH}
          cd install/${ARCH}
          zip -r ${{ github.workspace }}/php-${PHP_VERSION}-${ARCH}.zip .

      # Upload binary to release
      - name: Upload binary to release
        uses: softprops/action-gh-release@v2
        with:
          files: php-${{ env.PHP_VERSION }}-${{ env.ARCH }}.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
