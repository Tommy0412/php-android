name: Build PHP for Android

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      PHP_VERSION: 8.4.6
      ARCH: arm64-v8a
      API_LEVEL: 21
      TARGET_HOST: aarch64-linux-android

    steps:
      # Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v2

      # Set up Android NDK
      - name: Set up Android NDK
        run: |
          wget https://dl.google.com/android/repository/android-ndk-r28b-linux.zip
          unzip android-ndk-r28b-linux.zip
          echo "ANDROID_NDK_HOME=$GITHUB_WORKSPACE/android-ndk-r28b" >> $GITHUB_ENV
          echo "$GITHUB_WORKSPACE/android-ndk-r28b/toolchains/llvm/prebuilt/linux-x86_64/bin" >> $GITHUB_PATH

      # Install build tools and re2c
      - name: Install build tools and re2c
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake unzip wget autoconf automake libtool
          sudo apt-get install -y re2c pkg-config bison
          re2c --version

      # Build zlib first (required by OpenSSL and others)
      - name: Build zlib for Android
        run: |
          wget https://zlib.net/zlib-1.3.1.tar.gz
          tar xzf zlib-1.3.1.tar.gz
          cd zlib-1.3.1
          
          export TOOLCHAIN=$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64
          export CC=$TOOLCHAIN/bin/aarch64-linux-android$API_LEVEL-clang
          export AR=$TOOLCHAIN/bin/llvm-ar
          export RANLIB=$TOOLCHAIN/bin/llvm-ranlib
          
          ./configure --prefix=$GITHUB_WORKSPACE/deps/zlib --static
          make -j$(nproc)
          make install

- name: Build OpenSSL for Android
  run: |
    sudo apt-get install -y perl make
    wget https://www.openssl.org/source/openssl-3.0.12.tar.gz
    tar xzf openssl-3.0.12.tar.gz
    cd openssl-3.0.12

    export TOOLCHAIN=$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64
    export PATH=$TOOLCHAIN/bin:$PATH
    
    # Create a custom Makefile configuration
    cat > Makefile.android <<EOF
    CC=$TOOLCHAIN/bin/aarch64-linux-android$API_LEVEL-clang
    AR=$TOOLCHAIN/bin/llvm-ar
    RANLIB=$TOOLCHAIN/bin/llvm-ranlib
    CFLAGS=-fPIE -fPIC -D__ANDROID_API__=$API_LEVEL
    LDFLAGS=-pie
    EOF

    ./Configure --prefix=$GITHUB_WORKSPACE/deps/openssl \
      android-arm64 \
      -D__ANDROID_API__=$API_LEVEL \
      no-shared \
      no-dynamic-engine

    make -j$(nproc)
    make install_sw

      # Build libcurl for Android
      - name: Build libcurl for Android
        run: |
          wget https://curl.se/download/curl-8.8.0.tar.gz
          tar xzf curl-8.8.0.tar.gz
          cd curl-8.8.0

          # Set up toolchain
          export TOOLCHAIN=$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64
          export CC="$TOOLCHAIN/bin/${TARGET_HOST}${API_LEVEL}-clang"
          export CXX="$TOOLCHAIN/bin/${TARGET_HOST}${API_LEVEL}-clang++"
          export AR="$TOOLCHAIN/bin/llvm-ar"
          export RANLIB="$TOOLCHAIN/bin/llvm-ranlib"
          export LD="$TOOLCHAIN/bin/ld"
          export STRIP="$TOOLCHAIN/bin/llvm-strip"
          export PATH=$GITHUB_WORKSPACE/deps/openssl/bin:$PATH
          export LDFLAGS="-L$GITHUB_WORKSPACE/deps/openssl/lib -L$GITHUB_WORKSPACE/deps/zlib/lib"
          export CPPFLAGS="-I$GITHUB_WORKSPACE/deps/openssl/include -I$GITHUB_WORKSPACE/deps/zlib/include"

          ./configure \
            --host=$TARGET_HOST \
            --prefix=$GITHUB_WORKSPACE/deps/curl \
            --with-openssl=$GITHUB_WORKSPACE/deps/openssl \
            --with-zlib=$GITHUB_WORKSPACE/deps/zlib \
            --disable-shared \
            --enable-static \
            --without-libpsl \
            --without-librtmp \
            --disable-ldap \
            --disable-ldaps \
            --disable-ftp \
            --disable-file \
            --disable-dict \
            --disable-gopher \
            --disable-imap \
            --disable-pop3 \
            --disable-rtsp \
            --disable-smtp \
            --disable-telnet \
            --disable-tftp \
            --disable-smb

          make -j$(nproc)
          make install

      # Build Oniguruma
      - name: Build Oniguruma
        run: |
          wget https://github.com/kkos/oniguruma/releases/download/v6.9.8/onig-6.9.8.tar.gz
          tar xzf onig-6.9.8.tar.gz
          cd onig-6.9.8

          export TOOLCHAIN=$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64
          export CC="$TOOLCHAIN/bin/aarch64-linux-android$API_LEVEL-clang"
          export CXX="$TOOLCHAIN/bin/aarch64-linux-android$API_LEVEL-clang++"
          export AR="$TOOLCHAIN/bin/llvm-ar"
          export RANLIB="$TOOLCHAIN/bin/llvm-ranlib"

          ./configure \
            --host=aarch64-linux-android \
            --prefix=$GITHUB_WORKSPACE/deps/oniguruma \
            --disable-shared \
            --enable-static

          make -j$(nproc)
          make install

      # Build PHP
      - name: Build PHP
        run: |
          cd php-src
          git checkout PHP-$PHP_VERSION
          
          export TOOLCHAIN=$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64
          export CC="$TOOLCHAIN/bin/aarch64-linux-android$API_LEVEL-clang"
          export CXX="$TOOLCHAIN/bin/aarch64-linux-android$API_LEVEL-clang++"
          export AR="$TOOLCHAIN/bin/llvm-ar"
          export RANLIB="$TOOLCHAIN/bin/llvm-ranlib"
          export LD="$TOOLCHAIN/bin/ld"
          export STRIP="$TOOLCHAIN/bin/llvm-strip"

          # Set all dependency paths
          export CURL_DIR="$GITHUB_WORKSPACE/deps/curl"
          export SSL_DIR="$GITHUB_WORKSPACE/deps/openssl"
          export ONIG_DIR="$GITHUB_WORKSPACE/deps/oniguruma"
          export ZLIB_DIR="$GITHUB_WORKSPACE/deps/zlib"

          # Build configuration
          ./buildconf --force
          
          # Patch configure to fix detection issues
          sed -i 's/ac_cv_lib_onig_onig_new=no/ac_cv_lib_onig_onig_new=yes/g' configure
          sed -i 's/ac_cv_lib_curl_curl_easy_init=no/ac_cv_lib_curl_curl_easy_init=yes/g' configure

          ./configure \
            --host=aarch64-linux-android \
            --prefix=$GITHUB_WORKSPACE/install \
            --disable-all \
            --enable-cli \
            --enable-mbstring \
            --with-curl=$CURL_DIR \
            --with-openssl=$SSL_DIR \
            --with-zlib=$ZLIB_DIR \
            --enable-filter \
            --enable-ctype \
            --enable-tokenizer \
            --enable-pdo \
            --with-pdo-sqlite \
            --with-sqlite3 \
            --enable-xml \
            --with-libxml \
            --enable-phar \
            --enable-sockets \
            --without-iconv \
            --without-pcre-jit \
            --disable-opcache \
            CFLAGS="-fPIE -I$CURL_DIR/include -I$SSL_DIR/include -I$ONIG_DIR/include -I$ZLIB_DIR/include" \
            LDFLAGS="-pie -L$CURL_DIR/lib -L$SSL_DIR/lib -L$ONIG_DIR/lib -L$ZLIB_DIR/lib" \
            LIBS="-lcurl -lssl -lcrypto -lonig -lz"

          make -j$(nproc)
          make install

      # Package PHP binary
      - name: Package PHP binary
        run: |
          mkdir -p ${{ github.workspace }}/dist
          cd $GITHUB_WORKSPACE/install/bin
          cp php ${{ github.workspace }}/dist/php-android
          strip ${{ github.workspace }}/dist/php-android
          cd ${{ github.workspace }}/dist
          zip php-${{ env.PHP_VERSION }}-${{ env.ARCH }}.zip php-android

      # Upload binary to release
      - name: Upload binary to release
        uses: softprops/action-gh-release@v2
        with:
          files: dist/php-${{ env.PHP_VERSION }}-${{ env.ARCH }}.zip
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
